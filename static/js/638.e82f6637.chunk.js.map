{"version":3,"file":"static/js/638.e82f6637.chunk.js","mappings":"yNAkDA,UA7CoB,WAClB,IAAAA,GAAsCC,EAAAA,EAAAA,UAAS,IAAGC,GAAAC,EAAAA,EAAAA,GAAAH,EAAA,GAA3CI,EAAWF,EAAA,GAAEG,EAAcH,EAAA,GAClCI,GAA8BL,EAAAA,EAAAA,WAAS,GAAMM,GAAAJ,EAAAA,EAAAA,GAAAG,EAAA,GAAtCE,EAAOD,EAAA,GAAEE,EAAUF,EAAA,GAC1BG,GAA0BT,EAAAA,EAAAA,UAAS,MAAKU,GAAAR,EAAAA,EAAAA,GAAAO,EAAA,GAAjCE,EAAKD,EAAA,GAAEE,EAAQF,EAAA,GAEdG,GAAOC,EAAAA,EAAAA,MAAPD,IAERE,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAiB,eAAAC,GAAAC,EAAAA,EAAAA,GAAAC,IAAAA,MAAG,SAAAC,IAAA,IAAAC,EAAAC,EAAA,OAAAH,IAAAA,MAAA,SAAAI,GAAA,cAAAA,EAAAC,KAAAD,EAAAE,MAAA,OAEL,OAFKF,EAAAC,KAAA,EAEtBhB,GAAW,GAAMe,EAAAE,KAAA,GACQC,EAAAA,EAAAA,IAAUb,GAAI,KAAD,EAAhCQ,EAAUE,EAAAI,KACVL,EAAYD,EAAWO,QAE7BxB,EAAwB,OAATkB,QAAS,IAATA,GAAAA,EAAWO,OAASP,EAAY,IAAIC,EAAAE,KAAA,gBAAAF,EAAAC,KAAA,EAAAD,EAAAO,GAAAP,EAAA,SAEnDX,EAASW,EAAAO,GAAMC,SAAS,QAEN,OAFMR,EAAAC,KAAA,GAExBhB,GAAW,GAAOe,EAAAS,OAAA,6BAAAT,EAAAU,OAAA,GAAAb,EAAA,wBAErB,kBAZsB,OAAAH,EAAAiB,MAAA,KAAAC,UAAA,KAavBnB,EAAkBH,EACpB,GAAG,CAACA,IAEJ,IAAMuB,EAAWjC,EAAYkC,KAAI,SAAAC,GAAA,IAAGzB,EAAEyB,EAAFzB,GAAI0B,EAAMD,EAANC,OAAQC,EAAOF,EAAPE,QAAO,OACrDC,EAAAA,EAAAA,MAAA,MAAAC,SAAA,EACEC,EAAAA,EAAAA,KAAA,MAAAD,SAAKH,KACLI,EAAAA,EAAAA,KAAA,KAAAD,SAAIF,MAFG3B,EAGJ,IAED+B,EAAWC,QAAQ1C,EAAY0B,QAErC,OACEY,EAAAA,EAAAA,MAAAK,EAAAA,SAAA,CAAAJ,SAAA,CACGnC,IAAWoC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,eACd/B,IAASgC,EAAAA,EAAAA,KAAA,KAAAD,SAAI/B,IACbiC,GACCD,EAAAA,EAAAA,KAAA,MAAAD,SAAKN,IAEL,8CAIR,C","sources":["Pages/Reviews/ReviewsPage.jsx"],"sourcesContent":["import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { useEffect, useState } from 'react';\nimport { reviewApi } from 'components/api/api';\n\nconst ReviewsPage = () => {\n  const [movieReview, setMovieReview] = useState([]);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n\n  const { id } = useParams();\n\n  useEffect(() => {\n    const fetchMoviesReview = async () => {\n      try {\n        setLoading(true);\n        const dataReview = await reviewApi(id);\n        const arrReview = dataReview.results;\n        // console.log(arrReview);\n        setMovieReview(arrReview?.length ? arrReview : []);\n      } catch (error) {\n        setError(error.message);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchMoviesReview(id);\n  }, [id]);\n\n  const elements = movieReview.map(({ id, author, content }) => (\n    <li key={id}>\n      <h3>{author}</h3>\n      <p>{content}</p>\n    </li>\n  ));\n  const isReview = Boolean(movieReview.length);\n\n  return (\n    <>\n      {loading && <p>...Loading</p>}\n      {error && <p>{error}</p>}\n      {isReview ? (\n        <ul>{elements}</ul>\n      ) : (\n        \"We don't have any reviews for this movie.\"\n      )}\n    </>\n  );\n};\n\nexport default ReviewsPage;\n"],"names":["_useState","useState","_useState2","_slicedToArray","movieReview","setMovieReview","_useState3","_useState4","loading","setLoading","_useState5","_useState6","error","setError","id","useParams","useEffect","fetchMoviesReview","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","dataReview","arrReview","_context","prev","next","reviewApi","sent","results","length","t0","message","finish","stop","apply","arguments","elements","map","_ref2","author","content","_jsxs","children","_jsx","isReview","Boolean","_Fragment"],"sourceRoot":""}